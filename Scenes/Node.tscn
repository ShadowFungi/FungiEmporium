[gd_scene load_steps=8 format=2]

[ext_resource path="res://Script/GDscript/Gift/Button.gd" type="Script" id=1]
[ext_resource path="res://Script/GDscript/Gift/Node.gd" type="Script" id=2]
[ext_resource path="res://Fonts/CascadiaCode.tres" type="DynamicFont" id=3]
[ext_resource path="res://Script/GDscript/Gift/ChatContainer.gd" type="Script" id=4]
[ext_resource path="res://addons/gift/icon.png" type="Texture" id=5]
[ext_resource path="res://Scenes/SporeTimer.tscn" type="PackedScene" id=6]

[sub_resource type="GDScript" id=1]
script/source = "extends Gift

func _ready() -> void:
	
	# I use a file in the working directory to store auth data
	
	# so that I don't accidentally push it to the repository.
	
	# Replace this or create a auth file with 3 lines in your
	
	# project directory:
	
	# <bot username>
	
	# <oauth token>
	
	# <initial channel>
	
	var authfile := File.new()
	
	authfile.open(\"./auth\", File.READ)
	
	var botname := authfile.get_line()
	
	var token := authfile.get_line()
	
	var initial_channel = authfile.get_line()
	

	connect_to_twitch()
	
	yield(self, \"twitch_connected\")
	

	# Login using your username and an oauth token.
	
	# You will have to either get a oauth token yourself or use
	
	# https://twitchapps.com/tokengen/
	
	# to generate a token with custom scopes.
	
	authenticate_oauth(botname, token)
	
	if(yield(self, \"login_attempt\") == false):
		
	  print(\"Invalid username or token.\")
	
	  return
	
	join_channel(initial_channel)
	

	connect(\"cmd_no_permission\", get_parent(), \"no_permission\")
	
	connect(\"chat_message\", get_parent(), \"chat_message\")
	

	# Adds a command with a specified permission flag.
	# All implementations must take at least one arg for the command info.
	# Implementations that recieve args requrires two args,
	# the second arg will contain all params in a PoolStringArray
	# This command can only be executed by VIPS/MODS/SUBS/STREAMER
	add_command(\"test\", get_parent(), \"command_test\", 0, 0, PermissionFlag.NON_REGULAR)

	# These two commands can be executed by everyone
	add_command(\"helloworld\", get_parent(), \"hello_world\")
	add_command(\"greetme\", get_parent(), \"greet_me\")

	# This command can only be executed by the streamer
	add_command(\"streamer_only\", get_parent(), \"streamer_only\", 0, 0, PermissionFlag.STREAMER)

	# Command that requires exactly 1 arg.
	add_command(\"greet\", get_parent(), \"greet\", 1, 1)

	# Command that prints every arg seperated by a comma (infinite args allowed), at least 2 required
	add_command(\"list\", get_parent(), \"list\", -1, 2)

	# Adds a command alias
	add_alias(\"test\",\"test1\")
	add_alias(\"test\",\"test2\")
	add_alias(\"test\",\"test3\")
	# Or do it in a single line
	# add_aliases(\"test\", [\"test1\", \"test2\", \"test3\"])

	# Remove a single command
	remove_command(\"test2\")

	# Now only knows commands \"test\", \"test1\" and \"test3\"
	remove_command(\"test\")
	# Now only knows commands \"test1\" and \"test3\"

	# Remove all commands that call the same function as the specified command
	purge_command(\"test1\")
	# Now no \"test\" command is known

	# Send a chat message to the only connected channel (<channel_name>)
	# Fails, if connected to more than one channel.
#	chat(\"TEST\")

	# Send a chat message to channel <channel_name>
#	chat(\"TEST\", initial_channel)

	# Send a whisper to target user
#	whisper(\"TEST\", initial_channel)
"

[node name="Node" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Gift" type="Node" parent="."]
script = SubResource( 1 )
__meta__ = {
"_editor_icon": ExtResource( 5 )
}

[node name="ChatContainer" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 0.844444
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Chat" type="Panel" parent="ChatContainer"]
show_behind_parent = true
margin_right = 320.0
margin_bottom = 151.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ScrollContainer" type="ScrollContainer" parent="ChatContainer/Chat"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 10.0
margin_right = -10.0
margin_bottom = -10.0
follow_focus = true
scroll_horizontal_enabled = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ChatMessagesContainer" type="VBoxContainer" parent="ChatContainer/Chat/ScrollContainer"]
margin_right = 300.0
margin_bottom = 131.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/separation = 6
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HBoxContainer" type="HBoxContainer" parent="."]
anchor_top = 3.37777
anchor_right = 1.74063
anchor_bottom = 3.6
margin_top = -455.999
margin_right = -237.002
margin_bottom = -472.001
custom_constants/separation = 0
__meta__ = {
"_edit_use_anchors_": true
}

[node name="LineEdit" type="LineEdit" parent="HBoxContainer"]
margin_right = 273.0
margin_bottom = 24.0
rect_min_size = Vector2( 273, 0 )
size_flags_horizontal = 3
size_flags_vertical = 3
placeholder_text = "Bot Message"
caret_blink = true
caret_blink_speed = 0.5
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Button" type="Button" parent="HBoxContainer"]
margin_left = 273.0
margin_right = 320.0
margin_bottom = 24.0
rect_min_size = Vector2( 47, 24 )
custom_fonts/font = ExtResource( 3 )
text = "Send"
script = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="SporeTimer" parent="." instance=ExtResource( 6 )]
